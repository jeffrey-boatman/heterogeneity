
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # R command for batch: 
> # "C:\Program Files\R\R-3.6.0\bin\R.exe" CMD BATCH --vanilla R\3-main.R
> 
> 
> library(tidyverse)
-- [1mAttaching packages[22m ---------------------------------------------------------------------- tidyverse 1.2.1 --
[32mv[39m [34mggplot2[39m 3.2.0     [32mv[39m [34mpurrr  [39m 0.3.2
[32mv[39m [34mtibble [39m 2.1.3     [32mv[39m [34mdplyr  [39m 0.8.1
[32mv[39m [34mtidyr  [39m 0.8.3     [32mv[39m [34mstringr[39m 1.4.0
[32mv[39m [34mreadr  [39m 1.3.1     [32mv[39m [34mforcats[39m 0.4.0
-- [1mConflicts[22m ------------------------------------------------------------------------- tidyverse_conflicts() --
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
> library(xtable)
Warning message:
package 'xtable' was built under R version 3.6.1 
> source("R/functions.R")
> 
> # --- global variables dictating output and cohort --- #
> output_dir <- "all"
> # ---------------------------------------------------- #
> 
> set.seed(123)
> 
> load("../RData/analysis.RData")
> analysis <- analysis %>% rename(trt = teh_treatment)
> analysis <- analysis %>% 
+   mutate(tne_nmolperml_bsl = log(tne_nmolperml_bsl)) %>%
+   rename("ltne" = "tne_nmolperml_bsl")
> 
> 
> # outcomes that will be used throughout analysis.
> outcomes <- c("total_cpd", "cesd")
> 
> # training data is CENIC-P2
> train <- analysis %>% filter(study == "P2")
> trt   <- as.logical(train$trt) # treatment indicator, only for P2!
> 
> 
> # matrix of predictors, outcomes.
> # drop variables that will not be used as predictors or as outcomes
> vars_to_drop <- c("id", "study_cpd", "study", "trt", "teh_control")
> Ytrain <- train %>% select(outcomes)
> Xtrain <- train %>% select(-outcomes, -vars_to_drop)
> Xtrain <- model.matrix(~ 0 + ., Xtrain)
> 
> 
> # debug(estimate_trt_diff)
> 
> # loop over outcomes, get estimated treatment effects
> trt_diffs_list <- list()
> for (outcome in outcomes) {
+   trt_diffs_list[[outcome]] <- estimate_trt_diff(X = Xtrain,
+     X0 = Xtrain[!trt, ], 
+     X1 = Xtrain[trt, ], 
+     Y0 = Ytrain[, outcome, drop = TRUE][!trt],
+     Y1 = Ytrain[, outcome, drop = TRUE][trt])
+ }
Loading required package: glmnet
Loading required package: Matrix

Attaching package: 'Matrix'

The following object is masked from 'package:tidyr':

    expand

Loading required package: foreach

Attaching package: 'foreach'

The following objects are masked from 'package:purrr':

    accumulate, when

Loaded glmnet 2.0-18

Warning message:
package 'glmnet' was built under R version 3.6.1 
> 
> # create matrix with estimated treatment effects
> trt_diffs <- sapply(trt_diffs_list, '[[', "trt_diff")
> trt_diffs <- as_tibble(trt_diffs)
> 
> # create the tree for each column in treat_diffs
> # debug(rtree)
> tree_list <- list()
> for (outcome in outcomes)
+   tree_list[[outcome]] <- rtree(Xtrain, trt_diffs[, outcome, drop = TRUE])  
Loading required package: rpart
> 
> # fitted treat diffs
> fitted_trt_diffs <- sapply(tree_list, predict)
> fitted_trt_diffs <- as_tibble(fitted_trt_diffs)
> 
> # 'where' matrix showing which obs belong to the same node.
> where_tib <- sapply(tree_list, '[[', 'where')
> where_tib <- as_tibble(where_tib)
> 
> where_names      <- paste0("where_", names(where_tib))
> names(where_tib) <- where_names
> 
> # now we want to compute means within terminal nodes based
> # on tree built for other outcomes. To do this, we only need to
> # know which observations belong to the same terminal node.
> # Then we can compute means within these groups. To do this,
> # use the 'where' matrix to compute fitted values. To check that
> # this works, test it by using the method to compute values
> # on the original outcome. These should match the predicted
> # values obtainred from the tree predict function.
> # make sure this passes before proceeding. 
> 
> check <- list()
> 
> for (outcome in outcomes) {
+   where_name <- where_names[match(outcome, outcomes)]
+   where      <- where_tib[, where_name, drop = TRUE]
+   node_means <- tapply(trt_diffs[, outcome, drop = TRUE], where, mean)
+   nodes      <- as.numeric(names(node_means))
+   est        <- node_means[match(where, nodes)]
+   
+   check[[outcome]] <- est
+ }
> 
> check <- as_tibble(check)
> 
> # if TRUE, then proceed and compute means using this method.
> # If not, debug until TRUE.
> all_equal(round(check, 8), round(fitted_trt_diffs, 8))
[1] TRUE
> 
> # compute means within each where group.
> trt_diffs_w_where <- bind_cols(trt_diffs, where_tib)
> trt_diffs_w_where
[90m# A tibble: 591 x 4[39m
   total_cpd    cesd where_total_cpd where_cesd
       [3m[90m<dbl>[39m[23m   [3m[90m<dbl>[39m[23m           [3m[90m<int>[39m[23m      [3m[90m<int>[39m[23m
[90m 1[39m      5.74  0.043[4m5[24m              17         17
[90m 2[39m      3.61 -[31m1[39m[31m.[39m[31m38[39m                17         15
[90m 3[39m      2.57 -[31m1[39m[31m.[39m[31m0[39m[31m2[39m                10         17
[90m 4[39m     -[31m2[39m[31m.[39m[31m78[39m  0.689                4         17
[90m 5[39m      5.36 -[31m3[39m[31m.[39m[31m83[39m                15         15
[90m 6[39m      7.45 -[31m0[39m[31m.[39m[31m0[39m[31m86[4m5[24m[39m              20         17
[90m 7[39m      4.09  2.16                15         22
[90m 8[39m      2.92  1.58                 9         17
[90m 9[39m      5.28  0.519               10         15
[90m10[39m      6.36 -[31m1[39m[31m.[39m[31m50[39m                20          9
[90m# ... with 581 more rows[39m
> 
> fitted_means <- list()
> 
> for(outcome in outcomes) {
+  where_col <- where_names[match(outcome, outcomes)] 
+  means <- aggregate(trt_diffs_w_where, 
+    by  = list(trt_diffs_w_where[, where_col, drop = TRUE]), 
+    FUN = mean)
+  means <- means[, c(where_col, outcomes)]
+  names(means)[1] <- "node"
+  fitted_means[[outcome]] <- means 
+ }
> 
> # tables ----
> 
> # ~ lasso coefficients ----
> con_coefs <- lapply(trt_diffs_list, '[[', 'm0')
> con_coefs <- lapply(con_coefs, coef)
> 
> trt_coefs <- lapply(trt_diffs_list, '[[', 'm1')
> trt_coefs <- lapply(trt_coefs, coef)
> 
> coefs <- mapply(cbind, con_coefs, trt_coefs)
> coefs <- do.call(rbind, coefs)
> coefs <- as.matrix(coefs)
> 
> rownames(coefs) <- paste0(rep(outcomes, sapply(con_coefs, nrow)), " & ",
+   rownames(coefs))
> 
> # keep rows with at least 1 non-zero coefficient:
> coefs <- coefs[rowSums(coefs) > 0, ]
> 
> # format for printing
> colnames(coefs) <- c("Control", "Treatment")
> 
> coefs  <- as.data.frame(coefs)
> 
> coefs[] <- lapply(coefs, function(x) sprintf("%.2f", x))
> coefs[] <- lapply(coefs, function(x) gsub("0.00", "-", x))
> 
> write.table(coefs,
+   file      = sprintf("tables/%s/lasso-coefs.txt", output_dir),
+   sep       = " & ",
+   quote     = FALSE)
> 
> # ~ trt heterogeneity ----
> 
> n_lines <- sapply(fitted_means, nrow)
> 
> tab    <- do.call(rbind, fitted_means)
> rnames <- rownames(tab)
> dtab   <- dim(tab)
> tab    <- as.numeric(sprintf("%.2f", as.matrix(tab)))
> tab    <- array(tab, dim = dtab)
> 
> tab <- apply(tab, 2, function(x) sprintf("%0.2f", x))
> 
> colnames(tab) <- c("node", outcomes)
> # rownames(tab) <- rnames
> 
> tab <- as.data.frame(tab)
> 
> tab$node <- rnames
> 
> write.table(tab,
+   file      = sprintf("tables/%s/tree-outomes.txt", output_dir),
+   sep       = " & ",
+   quote     = FALSE,
+   row.names = FALSE)
> 
> # plots ----
> 
> # ~ histograms ----
> 
> # ~ trees ----
> for(outcome in outcomes) {
+   pdf(sprintf("plots/%s/tree-%s.pdf", output_dir, outcome))
+   plot_tree(tree_list[[outcome]])
+   dev.off()
+ }
Loading required package: rpart.plot
Warning message:
package 'rpart.plot' was built under R version 3.6.1 
> 
> proc.time()
   user  system elapsed 
   4.17    0.35    5.00 
