
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # R command for batch: 
> # "C:\Program Files\R\R-3.6.1\bin\R.exe" CMD BATCH --vanilla R\3-main.R
> 
> 
> library(tidyverse)
-- [1mAttaching packages[22m ---------------------------------------------------------------- tidyverse 1.2.1 --
[32mv[39m [34mggplot2[39m 3.2.0     [32mv[39m [34mpurrr  [39m 0.3.2
[32mv[39m [34mtibble [39m 2.1.3     [32mv[39m [34mdplyr  [39m 0.8.1
[32mv[39m [34mtidyr  [39m 0.8.3     [32mv[39m [34mstringr[39m 1.4.0
[32mv[39m [34mreadr  [39m 1.3.1     [32mv[39m [34mforcats[39m 0.4.0
-- [1mConflicts[22m ------------------------------------------------------------------- tidyverse_conflicts() --
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
> library(xtable)
> source("R/functions.R")
> 
> # --- global variables dictating output and cohort --- #
> output_dir <- "all"
> cohort <- "all"
> # ---------------------------------------------------- #
> 
> set.seed(123)
> 
> load("../RData/analysis.RData")
> analysis <- analysis %>% rename(trt = teh_treatment)
> analysis <- analysis %>% 
+   mutate(tne_nmolperml_bsl = log(tne_nmolperml_bsl)) %>%
+   rename("ltne" = "tne_nmolperml_bsl")
> 
> 
> # validation ----
> 
> # drop week 20 and non-baseline variables
> 
> vars_to_drop <- c("total_cpd_20", "study_cpd", "cesd", "cesd_20", "tne_20", "co_20", "study_cpd", "study_cpd")
> train <- analysis[, -match(vars_to_drop, names(analysis), NULL)]
> 
> test <- train %>% filter(study == "P1S1")
> train <- train %>% filter(study == "P2")
> 
> 
> # treatment indicators
> trt_train <- as.logical(train$trt)
> trt_test  <- as.logical(test$trt)
> 
> # predictor matrices and outcome 
> Ytrain <- train$total_cpd
> Ytest  <- test$total_cpd
> 
> vars_to_drop <- c("id", "study", "trt", "total_cpd")
> Xtrain <- train %>% select(-vars_to_drop)
> Xtest  <- test  %>% select(-vars_to_drop)
> 
> # cbind(names(Xtrain))
> # cbind(names(Xtest))
> 
> Xtrain <- model.matrix(~ 0 + ., Xtrain)
> Xtest  <- model.matrix(~ 0 + ., Xtest)
> 
> 
> # debugonce(estimate_trt_diff)
> 
> # ~ estimated treatment effects ----
> tdiffs_train <- estimate_trt_diff(X = Xtrain,
+   X0 = Xtrain[!trt_train, ], 
+   X1 = Xtrain[trt_train, ], 
+   Y0 = Ytrain[!trt_train],
+   Y1 = Ytrain[trt_train])
Loading required package: glmnet
Loading required package: Matrix

Attaching package: 'Matrix'

The following object is masked from 'package:tidyr':

    expand

Loading required package: foreach

Attaching package: 'foreach'

The following objects are masked from 'package:purrr':

    accumulate, when

Loaded glmnet 2.0-18

> 
> tdiffs_test <- estimate_trt_diff(X = Xtest,
+   X0 = Xtest[!trt_test, ], 
+   X1 = Xtest[trt_test, ], 
+   Y0 = Ytest[!trt_test],
+   Y1 = Ytest[trt_test])
> 
> #  estimated treatment effects
> trt_diffs_train <- tdiffs_train$trt_diff
> trt_diffs_test  <- tdiffs_test$trt_diff
> 
> # ~ regression tree ----
> 
> # debugonce(rtree)
> tree <- rtree(Xtrain, trt_diffs_train, maxdepth = 5, minbucket = 8)
Loading required package: rpart
> 
> # ~ test group means ----
> 
> # predicted means from tree
> 
> if (unique(length(tree$frame$yval)) < length(tree$frame$yval))
+   stop("yval doesn't contain unique values. Use of 'match' is invalid")
> 
> pred_test <- predict(tree, as.data.frame(Xtest))
> pred_node <- match(pred_test, tree$frame$yval)
> 
> means_by_tree  <- tapply(pred_test, pred_node, mean)
> 
> # observed means using tree covariate partition
> means_by_group <- tapply(trt_diffs_test, pred_node, mean)
> 
> # ~ plots ----
> 
> 
> # ~~ treatment effects ----
> 
> pdf(sprintf("plots/%s/validation-trt-diff-histograms.pdf", output_dir),
+   height = 5,
+   width = 10)
> par(mfrow = c(1, 2))
> hist(trt_diffs_train, prob = TRUE,
+   main = "CENIC-P2",
+   xlab = "Estimated Treatment Effects")
> hist(trt_diffs_test, prob = TRUE,
+   main = "CENIC-P1S1",
+   xlab = "Estimated Treatment Effects")
> dev.off()
null device 
          1 
> 
> # ~~ comparing means ----
> 
> cols = c("steelblue2", "seagreen3")
> pdf(sprintf("plots/%s/validation-means-plot.pdf", output_dir))
> plot(means_by_tree ~ seq_along(unique(pred_node)),
+   pch = 16,
+   xlab = "Terminal Node",
+   ylab = "Treatment Effect",
+   ylim = range(means_by_group, means_by_tree),
+   col = cols[1])
> points(means_by_group ~ seq_along(unique(pred_node)),
+   pch = 16,
+   col = cols[2])
> legend("topleft",
+   bty = "n",
+   pch = 16,
+   col = cols,
+   legend = c("Predicted Mean", "Observed Means"))
> dev.off()
null device 
          1 
> 
> pdf(sprintf("plots/%s/validation-scatter-plot.pdf", output_dir))
> plot(means_by_group ~ means_by_tree,
+   pch = 16,
+   ylab = "Observed Means",
+   xlab = "Predicted Means")
> legend("topleft",
+   legend = sprintf("r = %.3f", cor(means_by_group, means_by_tree)),
+   bty = "n")
> dev.off()
null device 
          1 
> 
> 
> # ~ tables ----
> 
> # ~~ lasso coefficients ----
> con_coefs <- lapply(list(tdiffs_train, tdiffs_test), '[[', 'm0')
> con_coefs <- lapply(con_coefs, coef)
> con_coefs <- do.call(cbind, con_coefs)
> 
> trt_coefs <- lapply(list(tdiffs_train, tdiffs_test), '[[', 'm1')
> trt_coefs <- lapply(trt_coefs, coef)
> trt_coefs <- do.call(cbind, trt_coefs)
> 
> coefs <- rbind(con_coefs, trt_coefs)
> coefs <- as.matrix(coefs)
> 
> rownames(coefs) <- paste0(rep(c("con", "trt"), each = nrow(con_coefs)), " & ",
+   rownames(coefs))
> 
> # keep rows with at least 1 non-zero coefficient:
> coefs <- coefs[rowSums(coefs) > 0, ]
> 
> # format for printing
> colnames(coefs) <- c("Train", "Test")
> 
> coefs  <- as.data.frame(coefs)
> 
> coefs[] <- lapply(coefs, function(x) sprintf("%.2f", x))
> coefs[] <- lapply(coefs, function(x) gsub("0.00", "-", x))
> 
> write.table(coefs,
+   file      = sprintf("tables/%s/validation-lasso-coefs.txt", output_dir),
+   sep       = " & ",
+   quote     = FALSE)
> 
> # ~ trt heterogeneity ----
> 
> 
> # main analysis ----
> 
> set.seed(123)
> 
> # drop week 6/8 outcomes and any other unnecessaries
> to_drop <- c("tne_20", "study_cpd", "total_cpd", "cesd") 
> train <- analysis
> train[, to_drop] <- NULL
> 
> # outcomes that will be used throughout analysis.
> outcomes <- c("total_cpd_20", "cesd_20", "co_20")
> 
> # training data is CENIC-P2
> train <- train %>% filter(study == "P2")
> trt   <- as.logical(train$trt) # treatment indicator, only for P2!
> 
> 
> # matrix of predictors, outcomes.
> # drop variables that will not be used as predictors or as outcomes
> vars_to_drop <- c("id", "study", "trt")
> Ytrain <- train %>% select(outcomes)
> Xtrain <- train %>% select(-outcomes, -vars_to_drop)
> Xtrain <- model.matrix(~ 0 + ., Xtrain)
> 
> # cbind(colnames(Xtrain))
> 
> # debug(estimate_trt_diff)
> 
> # ~ treatment effects ----
> trt_diffs_list <- list()
> for (outcome in outcomes) {
+   trt_diffs_list[[outcome]] <- estimate_trt_diff(X = Xtrain,
+     X0 = Xtrain[!trt, ], 
+     X1 = Xtrain[trt, ], 
+     Y0 = Ytrain[, outcome, drop = TRUE][!trt],
+     Y1 = Ytrain[, outcome, drop = TRUE][trt])
+ }
> 
> # create matrix with estimated treatment effects
> trt_diffs <- sapply(trt_diffs_list, '[[', "trt_diff")
> trt_diffs <- as_tibble(trt_diffs)
> 
> 
> # ~ permutation tests ----
> n_perm <- 1000
> n <- nrow(Xtrain)
> stddevs <- array(dim = c(n_perm, length(outcomes)),
+   dimnames = list(permutation = seq_len(n_perm), outcome = outcomes))
> 
> for(outcome in outcomes) {
+   y_perm <- Ytrain[, outcome, drop = TRUE]
+   y_perm[trt] <-  y_perm[trt] - (mean(y_perm[trt]) - mean(y_perm[!trt]))
+   for(ii in seq_len(n_perm)) {
+     index <- seq_len(n)
+     index <- sample(index)
+     trt_perm <- trt[index]
+     trt_diff_perm <- estimate_trt_diff(X = Xtrain,
+       X0 = Xtrain[!trt_perm, ], 
+       X1 = Xtrain[trt_perm, ], 
+       Y0 = y_perm[!trt_perm],
+       Y1 = y_perm[trt_perm])
+     stddevs[ii, outcome] <- sd(trt_diff_perm$trt_diff)
+     if(ii %% 100 == 0)
+       message(outcome, ": ", ii)
+   }
+ }
total_cpd_20: 100
total_cpd_20: 200
total_cpd_20: 300
total_cpd_20: 400
total_cpd_20: 500
total_cpd_20: 600
total_cpd_20: 700
total_cpd_20: 800
total_cpd_20: 900
total_cpd_20: 1000
cesd_20: 100
cesd_20: 200
cesd_20: 300
cesd_20: 400
cesd_20: 500
cesd_20: 600
cesd_20: 700
cesd_20: 800
